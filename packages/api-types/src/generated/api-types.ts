/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register a new user
     * @description Custom validation error messages for this endpoint are defined in ExtendedRegisterSchema
     *     at packages/api-types/src/extendedSchemas.ts.
     */
    post: operations['auth.register'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Login user and create authentication token
     * @description Custom validation error messages for this endpoint are defined in ExtendedLoginSchema
     *     at packages/api-types/src/extendedSchemas.ts.
     */
    post: operations['auth.login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Logout user (revoke token) */
    post: operations['auth.logout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get authenticated user details */
    get: operations['auth.user'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/notes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all notes with their authors
     * @description Retrieves all notes from the database with their associated authors.
     *     This endpoint is public and does not require authentication.
     */
    get: operations['note.index'];
    put?: never;
    /**
     * Create a new note for the authenticated user
     * @description Custom validation error messages for this endpoint are defined in ExtendedNoteSchema
     *     at packages/api-types/src/extendedSchemas.ts.
     */
    post: operations['note.store'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documentation': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Handles the API request and renders the Swagger documentation view */
    get: operations['l5-swagger.default.api'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/oauth2-callback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Handles the OAuth2 callback and retrieves the required file for the redirect */
    get: operations['l5-swagger.default.oauth2_callback'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** NoteResource */
    NoteResource: {
      id: number;
      title: string;
      content: string;
      userId: number;
      authorName?: string;
      created_at: string;
      updated_at: string;
    };
    /** UserResource */
    UserResource: {
      id: number;
      name: string;
      email: string;
      created_at: string;
      updated_at: string;
    };
  };
  responses: {
    /** @description Validation error */
    ValidationException: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          /** @description Errors overview. */
          message: string;
          /** @description A detailed description of each field that failed validation. */
          errors: {
            [key: string]: string[];
          };
        };
      };
    };
    /** @description Unauthenticated */
    AuthenticationException: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          /** @description Error overview. */
          message: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  'auth.register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': {
          name: string;
          /** Format: email */
          email: string;
          password: string;
          password_confirmation: string;
        };
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example User registered successfully. */
            message: string;
            user: components['schemas']['UserResource'];
            token: string;
          };
        };
      };
      422: components['responses']['ValidationException'];
    };
  };
  'auth.login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': {
          /** Format: email */
          email: string;
          password: string;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example Login successful. */
            message: string;
            user: components['schemas']['UserResource'];
            token: string;
          };
        };
      };
      422: components['responses']['ValidationException'];
    };
  };
  'auth.logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example Logged out successfully. */
            message: string;
          };
        };
      };
      401: components['responses']['AuthenticationException'];
    };
  };
  'auth.user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return the authenticated user
       *
       *
       *
       *     `UserResource` */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserResource'];
        };
      };
      401: components['responses']['AuthenticationException'];
    };
  };
  'note.index': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return JSON response containing array of notes using NoteResource
       *
       *
       *
       *     Array of `NoteResource` */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NoteResource'][];
        };
      };
    };
  };
  'note.store': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': {
          title: string;
          content: string;
        };
      };
    };
    responses: {
      /** @description Return JSON response with HTTP 201 Created status using NoteResource
       *
       *
       *
       *     `NoteResource` */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['NoteResource'];
        };
      };
      401: components['responses']['AuthenticationException'];
      422: components['responses']['ValidationException'];
    };
  };
  'l5-swagger.default.api': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Need the / at the end to avoid CORS errors on Homestead systems. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
    };
  };
  'l5-swagger.default.oauth2_callback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
    };
  };
}
